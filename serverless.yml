service: sls-user-service

frameworkVersion: "3"

useDotenv: true
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    USER_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${env:USER_TABLE}"
        # Add this statement to allow 'Scan' operation
        - Effect: Allow
          Action:
            - dynamodb:Scan
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${env:USER_TABLE}"
functions:
  create:
    handler: build/index.createUserHandler
    events:
      - http:
          path: user
          method: post
          cors: true
  get:
    handler: build/index.getUserHandler
    events:
      - http:
          path: user
          method: get
          cors: true
          
resources:
  Resources:
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${env:USER_TABLE}

plugins:
  - serverless-dotenv-plugin
  - serverless-offline